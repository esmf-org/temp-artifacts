2022-07-20 14:37:27
0:  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
1:  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
1:  NUMBER_OF_PROCESSORS           4
2:  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
2:  NUMBER_OF_PROCESSORS           4
3:  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
3:  NUMBER_OF_PROCESSORS           4
0:  NUMBER_OF_PROCESSORS           4
3:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
3: 90, line 118
0:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
0: 90, line 118
1:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
1: 90, line 118
2:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
2: 90, line 118
3:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
3: 90, line 125
0:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
0: 90, line 125
1:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
1: 90, line 125
2:  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
2: 90, line 125
1:  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
2:  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
3:  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
0:  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
1:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
1: , line 150
2:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
2: , line 150
3:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
3: , line 150
0:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
0: , line 150
0:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
0: , line 157
1:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
1: , line 157
2:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
2: , line 157
3:  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
3: , line 157
1:  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
2:  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
3:  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
0:  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
0:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
0: 90, line 171
1:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
1: 90, line 171
2:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
2: 90, line 171
2:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
2: 90, line 178
3:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
3: 90, line 171
3:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
3: 90, line 178
0:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
0: 90, line 178
1:  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
1: 90, line 178
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
1: F90, line 186
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
3: F90, line 186
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
0: F90, line 186
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
2: F90, line 186
3:  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
3: e 193
0:  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
0: e 193
1:  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
1: e 193
2:  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
2: e 193
1:  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
1: 02
2:  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
2: 02
3:  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
3: 02
0:  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
0: 02
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
2:  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
2: 7
0:  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
0: 7
1:  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
1: 7
3:  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
3: 7
3:  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
3: e 225
0:  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
0: e 225
1:  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
1: e 225
2:  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
2: e 225
2:  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
2: ne 232
0:  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
0: ne 232
1:  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
1: ne 232
3:  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
3: ne 232
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
1: rrayCreateGetUTest.F90, line 241
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
1: F90, line 249
1:  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
1: eateGetUTest.F90, line 277
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
1: CreateGetUTest.F90, line 285
1:--- ESMCI::Array::print start ---
1: Base name    = MyArray with ArraySpec
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
1:{}Array typekind/rank: Real*8 / 2 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x3469870:
1:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
1:            dim[0] = 7  dim[1] = 12  
1:  Real, *8, Dim 2, Data values:
1:( 9, 1) =  0
1:(10, 1) =  0
1:(11, 1) =  0
1:(12, 1) =  0
1:(13, 1) =  0
1:(14, 1) =  0
1:(15, 1) =  0
1:( 9, 2) =  0
1:(10, 2) =  0
1:(11, 2) =  0
1:  skipping to end ...
1:(13,11) =  0
1:(14,11) =  0
1:(15,11) =  0
1:( 9,12) =  0
1:(10,12) =  0
1:(11,12) =  0
1:(12,12) =  0
1:(13,12) =  0
1:(14,12) =  0
1:(15,12) =  0
1:dim 1: [0]: [9 [9 [9, 15] 15] 15]
1:dim 2: [1]: [1 [1 [1, 12] 12] 12]
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
1: 292
1: Array name: 
1: MyArray with ArraySpec                                                         
1:  
1:  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
1: etUTest.F90, line 300
1:  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
1:  306
1:  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
0: rrayCreateGetUTest.F90, line 241
1:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 319
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
2: rrayCreateGetUTest.F90, line 241
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
3: rrayCreateGetUTest.F90, line 241
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
0: F90, line 249
0:  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
3: F90, line 249
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
2: F90, line 249
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
3:  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
2:  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
0: eateGetUTest.F90, line 277
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
0: CreateGetUTest.F90, line 285
1:  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
1: e 326
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
3: eateGetUTest.F90, line 277
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
2: eateGetUTest.F90, line 277
1:  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
1:  332
0:--- ESMCI::Array::print start ---
0: Base name    = MyArray with ArraySpec
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
2: CreateGetUTest.F90, line 285
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
3: CreateGetUTest.F90, line 285
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
1:  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 339
3:--- ESMCI::Array::print start ---
2:--- ESMCI::Array::print start ---
3: Base name    = MyArray with ArraySpec
0:{}Array typekind/rank: Real*8 / 2 
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 1
2: Base name    = MyArray with ArraySpec
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x34697e0:
0:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
0:            dim[0] = 8  dim[1] = 12  
0:  Real, *8, Dim 2, Data values:
0:( 1, 1) =  0
0:( 2, 1) =  0
0:( 3, 1) =  0
0:( 4, 1) =  0
0:( 5, 1) =  0
0:( 6, 1) =  0
0:( 7, 1) =  0
0:( 8, 1) =  0
0:( 1, 2) =  0
0:( 2, 2) =  0
0:  skipping to end ...
0:( 7,11) =  0
0:( 8,11) =  0
0:( 1,12) =  0
0:( 2,12) =  0
0:( 3,12) =  0
0:( 4,12) =  0
0:( 5,12) =  0
0:( 6,12) =  0
0:( 7,12) =  0
0:( 8,12) =  0
2:{}Array typekind/rank: Real*8 / 2 
2:~ lower class' values ~
2:DistGrid dimCount = 2
2:deCount = 4
2:localDeCount = 1
3:{}Array typekind/rank: Real*8 / 2 
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 1
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x34699b0:
3:            rank = 2, typekind = 6, base_addr = 0x2af024367b00
0:dim 1: [0]: [1 [1 [1, 8] 8] 8]
0:dim 2: [1]: [1 [1 [1, 12] 12] 12]
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
0: 292
1:  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
1: eGetUTest.F90, line 347
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x3469930:
2:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
2:            dim[0] = 8  dim[1] = 11  
2:  Real, *8, Dim 2, Data values:
2:( 1,13) =  0
3:            dim[0] = 7  dim[1] = 11  
3:  Real, *8, Dim 2, Data values:
3:( 9,13) =  0
3:(10,13) =  0
3:(11,13) =  0
3:(12,13) =  0
3:(13,13) =  0
3:(14,13) =  0
3:(15,13) =  0
3:( 9,14) =  0
3:(10,14) =  0
3:(11,14) =  0
2:( 2,13) =  0
2:( 3,13) =  0
2:( 4,13) =  0
2:( 5,13) =  0
2:( 6,13) =  0
2:( 7,13) =  0
2:( 8,13) =  0
2:( 1,14) =  0
2:( 2,14) =  0
2:  skipping to end ...
2:( 7,22) =  0
2:( 8,22) =  0
2:( 1,23) =  0
3:  skipping to end ...
3:(13,22) =  0
3:(14,22) =  0
3:(15,22) =  0
3:( 9,23) =  0
3:(10,23) =  0
3:(11,23) =  0
3:(12,23) =  0
3:(13,23) =  0
3:(14,23) =  0
3:(15,23) =  0
3:dim 1: [0]: [9 [9 [9, 15] 15] 15]
3:dim 2: [1]: [13 [13 [13, 23] 23] 23]
2:( 2,23) =  0
2:( 3,23) =  0
2:( 4,23) =  0
2:( 5,23) =  0
2:( 6,23) =  0
2:( 7,23) =  0
2:( 8,23) =  0
2:dim 1: [0]: [1 [1 [1, 8] 8] 8]
2:dim 2: [1]: [13 [13 [13, 23] 23] 23]
2:--- ESMCI::Array::print end ---
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
3: 292
1: Array name: 
1: Array007                                                                       
1:  
1:  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
2:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
2: 292
1: t.F90, line 355
0: Array name: 
0: MyArray with ArraySpec                                                         
0:  
1:  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
1: est.F90, line 361
0:  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
0: etUTest.F90, line 300
1:  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
1: CreateGetUTest.F90, line 368
0:  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
0:  306
3: Array name: 
3: MyArray with ArraySpec                                                         
3:  
0:  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
2: Array name: 
2: MyArray with ArraySpec                                                         
2:  
2:  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
2: etUTest.F90, line 300
3:  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
3: etUTest.F90, line 300
3:  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
3:  306
0:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 319
2:  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
2:  306
3:  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
2:  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
3:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 319
2:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 319
0:  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
0: e 326
0:  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
0:  332
3:  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
3: e 326
2:  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
2: e 326
0:  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 339
3:  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
3:  332
2:  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
2:  332
3:  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 339
0:  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
0: eGetUTest.F90, line 347
2:  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 339
0: Array name: 
0: Array007                                                                       
0:  
3:  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
3: eGetUTest.F90, line 347
0:  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 355
2:  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
2: eGetUTest.F90, line 347
0:  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
0: est.F90, line 361
3: Array name: 
3: Array007                                                                       
3:  
0:  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
0: CreateGetUTest.F90, line 368
2: Array name: 
2: Array007                                                                       
2:  
2:  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 355
3:  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 355
3:  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
3: est.F90, line 361
2:  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
2: est.F90, line 361
2:  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
2: CreateGetUTest.F90, line 368
3:  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
3: CreateGetUTest.F90, line 368
1:  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
1: t.F90, line 384
3:  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
3: t.F90, line 384
2:  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
2: t.F90, line 384
0:  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
0: t.F90, line 384
1:  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
1: yCreateGetUTest.F90, line 402
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
1:--- ESMCI::Array::print start ---
1: Base name    = Array007
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
1:{}Array typekind/rank: Real*8 / 2 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x346a840:
1:            rank = 2, typekind = 6, base_addr = 0x2af024367700
1:            dim[0] = 7  dim[1] = 12  
1:  Real, *8, Dim 2, Data values:
1:( 9, 1) =  101
1:(10, 1) =  101
1:(11, 1) =  101
1:(12, 1) =  101
1:(13, 1) =  101
1:(14, 1) =  101
1:(15, 1) =  101
1:( 9, 2) =  101
1:(10, 2) =  101
1:(11, 2) =  101
1:  skipping to end ...
1:(13,11) =  101
1:(14,11) =  101
1:(15,11) =  101
1:( 9,12) =  101
1:(10,12) =  101
1:(11,12) =  101
1:(12,12) =  101
1:(13,12) =  101
1:(14,12) =  101
1:(15,12) =  101
1:dim 1: [0]: [9 [9 [9, 15] 15] 15]
1:dim 2: [1]: [1 [1 [1, 12] 12] 12]
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
1:  Test, ESMF_ArrayCreateGetUTest.F90, line 416
1:  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
1: 3
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
1: CreateGetUTest.F90, line 431
3:  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
3: yCreateGetUTest.F90, line 402
1:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 438
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
3:--- ESMCI::Array::print start ---
1:  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
1: eGetUTest.F90, line 446
3: Base name    = Array007
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 2 
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 1
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x346a980:
3:            rank = 2, typekind = 6, base_addr = 0x2af024367880
3:            dim[0] = 7  dim[1] = 11  
3:  Real, *8, Dim 2, Data values:
3:( 9,13) =  103
3:(10,13) =  103
3:(11,13) =  103
3:(12,13) =  103
1: Array name: 
1: Array009                                                                       
1:  
3:(13,13) =  103
3:(14,13) =  103
3:(15,13) =  103
3:( 9,14) =  103
3:(10,14) =  103
3:(11,14) =  103
3:  skipping to end ...
3:(13,22) =  103
3:(14,22) =  103
1:  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 454
3:(15,22) =  103
3:( 9,23) =  103
3:(10,23) =  103
3:(11,23) =  103
3:(12,23) =  103
3:(13,23) =  103
3:(14,23) =  103
3:(15,23) =  103
3:dim 1: [0]: [9 [9 [9, 15] 15] 15]
1:  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
1: est.F90, line 460
3:dim 2: [1]: [13 [13 [13, 23] 23] 23]
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
3:  Test, ESMF_ArrayCreateGetUTest.F90, line 416
1:  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
1: CreateGetUTest.F90, line 467
3:  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
3: 3
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
3: CreateGetUTest.F90, line 431
3:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 438
3:  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
3: eGetUTest.F90, line 446
2:  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
2: yCreateGetUTest.F90, line 402
3: Array name: 
3: Array009                                                                       
3:  
3:  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 454
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
3:  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
3: est.F90, line 460
2:--- ESMCI::Array::print start ---
2: Base name    = Array007
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
3:  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
3: CreateGetUTest.F90, line 467
2:{}Array typekind/rank: Real*8 / 2 
2:~ lower class' values ~
2:DistGrid dimCount = 2
2:deCount = 4
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x346a900:
2:            rank = 2, typekind = 6, base_addr = 0x2af024367700
2:            dim[0] = 8  dim[1] = 11  
2:  Real, *8, Dim 2, Data values:
2:( 1,13) =  102
2:( 2,13) =  102
2:( 3,13) =  102
2:( 4,13) =  102
2:( 5,13) =  102
2:( 6,13) =  102
2:( 7,13) =  102
2:( 8,13) =  102
2:( 1,14) =  102
2:( 2,14) =  102
2:  skipping to end ...
2:( 7,22) =  102
2:( 8,22) =  102
2:( 1,23) =  102
2:( 2,23) =  102
2:( 3,23) =  102
2:( 4,23) =  102
2:( 5,23) =  102
2:( 6,23) =  102
2:( 7,23) =  102
2:( 8,23) =  102
2:dim 1: [0]: [1 [1 [1, 8] 8] 8]
2:dim 2: [1]: [13 [13 [13, 23] 23] 23]
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
2:  Test, ESMF_ArrayCreateGetUTest.F90, line 416
2:  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
2: 3
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
2: CreateGetUTest.F90, line 431
0:  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
0: yCreateGetUTest.F90, line 402
2:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 438
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
0:--- ESMCI::Array::print start ---
2:  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
2: eGetUTest.F90, line 446
0: Base name    = Array007
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 2 
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x346a7b0:
0:            rank = 2, typekind = 6, base_addr = 0x2af024367700
0:            dim[0] = 8  dim[1] = 12  
0:  Real, *8, Dim 2, Data values:
0:( 1, 1) =  100
2: Array name: 
2: Array009                                                                       
2:  
2:  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 454
0:( 2, 1) =  100
0:( 3, 1) =  100
0:( 4, 1) =  100
0:( 5, 1) =  100
0:( 6, 1) =  100
0:( 7, 1) =  100
0:( 8, 1) =  100
0:( 1, 2) =  100
0:( 2, 2) =  100
0:  skipping to end ...
0:( 7,11) =  100
0:( 8,11) =  100
0:( 1,12) =  100
0:( 2,12) =  100
0:( 3,12) =  100
0:( 4,12) =  100
0:( 5,12) =  100
0:( 6,12) =  100
0:( 7,12) =  100
0:( 8,12) =  100
0:dim 1: [0]: [1 [1 [1, 8] 8] 8]
0:dim 2: [1]: [1 [1 [1, 12] 12] 12]
0:--- ESMCI::Array::print end ---
2:  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
2: est.F90, line 460
0:  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
0:  Test, ESMF_ArrayCreateGetUTest.F90, line 416
2:  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
2: CreateGetUTest.F90, line 467
0:  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
0: 3
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
0: CreateGetUTest.F90, line 431
0:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 438
0:  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
0: eGetUTest.F90, line 446
0: Array name: 
0: Array009                                                                       
0:  
0:  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 454
0:  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
0: est.F90, line 460
0:  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
0: CreateGetUTest.F90, line 467
1:  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
1: 90, line 483
3:  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
3: 90, line 483
2:  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
2: 90, line 483
0:  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
0: 90, line 483
3:  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
3: yCreateGetUTest.F90, line 501
1:  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
1: yCreateGetUTest.F90, line 501
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
3:  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
3: 5
1:  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
1: 5
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
3: CreateGetUTest.F90, line 523
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
1: CreateGetUTest.F90, line 523
3:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 530
1:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 530
1:  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
1: etUTest.F90, line 538
3:  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
3: etUTest.F90, line 538
1: Array name: 
1: Array011                                                                       
1:  
3: Array name: 
3: Array011                                                                       
3:  
3:  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
3: F90, line 546
1:  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
1: F90, line 546
3:  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
3: t.F90, line 552
1:  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
1: t.F90, line 552
3:  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
3: eateGetUTest.F90, line 559
1:  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
1: eateGetUTest.F90, line 559
2:  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
2: yCreateGetUTest.F90, line 501
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
2:  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
2: 5
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
2: CreateGetUTest.F90, line 523
2:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 530
2:  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
2: etUTest.F90, line 538
2: Array name: 
2: Array011                                                                       
2:  
2:  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
2: F90, line 546
2:  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
2: t.F90, line 552
2:  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
2: eateGetUTest.F90, line 559
0:  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
0: yCreateGetUTest.F90, line 501
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
0:  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
0: 5
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
0: CreateGetUTest.F90, line 523
0:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 530
0:  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
0: etUTest.F90, line 538
0: Array name: 
0: Array011                                                                       
0:  
0:  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
0: F90, line 546
3:  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
3: teGetUTest.F90, line 575
0:  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
0: t.F90, line 552
0:  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
0: eateGetUTest.F90, line 559
1:  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
1: teGetUTest.F90, line 575
2:  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
2: teGetUTest.F90, line 575
3:  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
3: teGetUTest.F90, line 593
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
3:  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
0:  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
0: teGetUTest.F90, line 575
1:  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
1: teGetUTest.F90, line 593
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
1:  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
3:  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
3: ayCreateGetUTest.F90, line 616
3:--- ESMCI::Array::print start ---
3: Base name    = MyArray
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*4 / 3 
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 1
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x346c190:
3:            rank = 3, typekind = 5, base_addr = 0x2af02435f040
3:            dim[0] = 9  dim[1] = 12  dim[2] = 8  
3:  Real, *4, Dim 3, Data values:
3:(-2, 1, 3) =  0
3:(-1, 1, 3) =  0
3:( 0, 1, 3) =  0
3:( 1, 1, 3) =  0
3:( 2, 1, 3) =  0
3:( 3, 1, 3) =  0
3:( 4, 1, 3) =  0
3:( 5, 1, 3) =  0
3:( 6, 1, 3) =  0
3:(-2, 2, 3) =  0
3:  skipping to end ...
3:( 6,11,10) =  0
3:(-2,12,10) =  0
3:(-1,12,10) =  0
3:( 0,12,10) =  0
3:( 1,12,10) =  0
3:( 2,12,10) =  0
3:( 3,12,10) =  0
3:( 4,12,10) =  0
3:( 5,12,10) =  0
3:( 6,12,10) =  0
3:dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
3:dim 2: [1]: [1 [1 [1, 11] 11] 12]
3:dim 3: undistLBound[0]=3            undistUBound[0]=10
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
3: line 623
3:  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
1:  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
1: ayCreateGetUTest.F90, line 616
3:  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
1:--- ESMCI::Array::print start ---
1: Base name    = MyArray
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
1:{}Array typekind/rank: Real*4 / 3 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x346c050:
1:            rank = 3, typekind = 5, base_addr = 0x2af02435f040
1:            dim[0] = 9  dim[1] = 12  dim[2] = 8  
1:  Real, *4, Dim 3, Data values:
1:(-2, 1, 3) =  0
1:(-1, 1, 3) =  0
1:( 0, 1, 3) =  0
1:( 1, 1, 3) =  0
1:( 2, 1, 3) =  0
1:( 3, 1, 3) =  0
1:( 4, 1, 3) =  0
1:( 5, 1, 3) =  0
1:( 6, 1, 3) =  0
1:(-2, 2, 3) =  0
1:  skipping to end ...
1:( 6,11,10) =  0
1:(-2,12,10) =  0
1:(-1,12,10) =  0
1:( 0,12,10) =  0
1:( 1,12,10) =  0
1:( 2,12,10) =  0
1:( 3,12,10) =  0
1:( 4,12,10) =  0
1:( 5,12,10) =  0
1:( 6,12,10) =  0
1:dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
1:dim 2: [1]: [1 [1 [1, 12] 12] 12]
1:dim 3: undistLBound[0]=3            undistUBound[0]=10
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
1: line 623
1:  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
1:  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
3:  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
3: .F90, line 653
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
1:  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
1: .F90, line 653
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
2:  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
2: teGetUTest.F90, line 593
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
2:  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
3:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
3: SMF_ArrayCreateGetUTest.F90, line 671
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
1:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
1: SMF_ArrayCreateGetUTest.F90, line 671
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
3:  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
3: , ESMF_ArrayCreateGetUTest.F90, line 689
1:  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
1: , ESMF_ArrayCreateGetUTest.F90, line 689
2:  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
2: ayCreateGetUTest.F90, line 616
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
2:--- ESMCI::Array::print start ---
2: Base name    = MyArray
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
2:{}Array typekind/rank: Real*4 / 3 
2:~ lower class' values ~
2:DistGrid dimCount = 2
2:deCount = 4
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x346c110:
2:            rank = 3, typekind = 5, base_addr = 0x2af02435f040
2:            dim[0] = 9  dim[1] = 12  dim[2] = 8  
2:  Real, *4, Dim 3, Data values:
2:(-2, 1, 3) =  0
2:(-1, 1, 3) =  0
2:( 0, 1, 3) =  0
2:( 1, 1, 3) =  0
2:( 2, 1, 3) =  0
2:( 3, 1, 3) =  0
2:( 4, 1, 3) =  0
2:( 5, 1, 3) =  0
2:( 6, 1, 3) =  0
2:(-2, 2, 3) =  0
2:  skipping to end ...
2:( 6,11,10) =  0
2:(-2,12,10) =  0
2:(-1,12,10) =  0
2:( 0,12,10) =  0
2:( 1,12,10) =  0
2:( 2,12,10) =  0
2:( 3,12,10) =  0
2:( 4,12,10) =  0
2:( 5,12,10) =  0
2:( 6,12,10) =  0
2:dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
2:dim 2: [1]: [1 [1 [1, 11] 11] 12]
2:dim 3: undistLBound[0]=3            undistUBound[0]=10
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
2: line 623
2:  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
2:  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
2:  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
2: .F90, line 653
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
2:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
2: SMF_ArrayCreateGetUTest.F90, line 671
3:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
3: MF_ArrayCreateGetUTest.F90, line 708
1:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
1: MF_ArrayCreateGetUTest.F90, line 708
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
3: s Test, ESMF_ArrayCreateGetUTest.F90, line 725
2:  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
2: , ESMF_ArrayCreateGetUTest.F90, line 689
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
1: s Test, ESMF_ArrayCreateGetUTest.F90, line 725
3:--- ESMCI::Array::print start ---
3: Base name    = MyArray Negative
1:--- ESMCI::Array::print start ---
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 2 
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 1
1: Base name    = MyArray Negative
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x346c190:
3:            rank = 2, typekind = 6, base_addr = 0x2af024367b00
3:            dim[0] = 7  dim[1] = 11  
3:  Real, *8, Dim 2, Data values:
1:{}Array typekind/rank: Real*8 / 2 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x346c050:
1:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
1:            dim[0] = 7  dim[1] = 12  
1:  Real, *8, Dim 2, Data values:
1:( 9, 1) =  2.33253e-310
3:( 9,13) =  2.33253e-310
3:(10,13) =  303
3:(11,13) =  303
3:(12,13) =  303
3:(13,13) =  303
3:(14,13) =  303
3:(15,13) =  303
0:  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
0: teGetUTest.F90, line 593
1:(10, 1) =  301
1:(11, 1) =  301
1:(12, 1) =  301
1:(13, 1) =  301
1:(14, 1) =  301
1:(15, 1) =  301
1:( 9, 2) =  301
1:(10, 2) =  301
1:(11, 2) =  301
1:  skipping to end ...
1:(13,11) =  301
1:(14,11) =  301
1:(15,11) =  301
1:( 9,12) =  301
1:(10,12) =  301
1:(11,12) =  301
3:( 9,14) =  303
3:(10,14) =  303
3:(11,14) =  303
3:  skipping to end ...
3:(13,22) =  303
3:(14,22) =  303
3:(15,22) =  303
3:( 9,23) =  303
3:(10,23) =  303
3:(11,23) =  303
3:(12,23) =  303
3:(13,23) =  303
3:(14,23) =  303
3:(15,23) =  303
3:dim 1: [0]: [9 [10 [9, 15] 13] 15]
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
1:(12,12) =  301
1:(13,12) =  301
1:(14,12) =  301
1:(15,12) =  301
1:dim 1: [0]: [9 [10 [9, 15] 13] 15]
1:dim 2: [1]: [1 [2 [1, 12] 9] 12]
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
1: reateGetUTest.F90, line 732
3:dim 2: [1]: [13 [14 [13, 23] 20] 23]
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
3: reateGetUTest.F90, line 732
0:  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
1: t, ESMF_ArrayCreateGetUTest.F90, line 748
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
3: t, ESMF_ArrayCreateGetUTest.F90, line 748
1:--- ESMCI::Array::print start ---
1: Base name    = MyArray Negative Edge
3:--- ESMCI::Array::print start ---
3: Base name    = MyArray Negative Edge
3: Status: Base = Ready,  object = Ready
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 2 
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 1
1:{}Array typekind/rank: Real*8 / 2 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x346c050:
1:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x346c190:
3:            rank = 2, typekind = 6, base_addr = 0x2af024357d00
3:            dim[0] = 7  dim[1] = 12  
3:  Real, *8, Dim 2, Data values:
3:( 9,13) =  0
3:(10,13) =  0
3:(11,13) =  0
0:  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
0: ayCreateGetUTest.F90, line 616
1:            dim[0] = 7  dim[1] = 12  
1:  Real, *8, Dim 2, Data values:
1:( 9, 1) =  2.33253e-310
1:(10, 1) =  301
1:(11, 1) =  301
1:(12, 1) =  301
1:(13, 1) =  301
1:(14, 1) =  301
1:(15, 1) =  301
1:( 9, 2) =  301
1:(10, 2) =  301
1:(11, 2) =  301
1:  skipping to end ...
1:(13,11) =  301
3:(12,13) =  0
3:(13,13) =  0
3:(14,13) =  0
3:(15,13) =  0
3:( 9,14) =  0
3:(10,14) =  0
3:(11,14) =  0
3:  skipping to end ...
3:(13,23) =  0
3:(14,23) =  0
3:(15,23) =  0
3:( 9,24) =  0
3:(10,24) =  0
3:(11,24) =  0
3:(12,24) =  0
3:(13,24) =  0
1:(14,11) =  301
1:(15,11) =  301
1:( 9,12) =  301
1:(10,12) =  301
1:(11,12) =  301
1:(12,12) =  301
1:(13,12) =  301
1:(14,12) =  301
1:(15,12) =  301
1:dim 1: [0]: [9 [9 [9, 15] 13] 15]
1:dim 2: [1]: [1 [2 [1, 12] 12] 12]
1:--- ESMCI::Array::print end ---
2:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
2: MF_ArrayCreateGetUTest.F90, line 708
3:(14,24) =  0
3:(15,24) =  0
3:dim 1: [0]: [9 [9 [9, 15] 13] 15]
3:dim 2: [1]: [13 [13 [13, 23] 24] 24]
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
3: rayCreateGetUTest.F90, line 755
0:--- ESMCI::Array::print start ---
0: Base name    = MyArray
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*4 / 3 
1:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
1: rayCreateGetUTest.F90, line 755
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x346bfc0:
0:            rank = 3, typekind = 5, base_addr = 0x2af02435f040
0:            dim[0] = 9  dim[1] = 12  dim[2] = 8  
0:  Real, *4, Dim 3, Data values:
0:(-2, 1, 3) =  0
0:(-1, 1, 3) =  0
0:( 0, 1, 3) =  0
0:( 1, 1, 3) =  0
0:( 2, 1, 3) =  0
0:( 3, 1, 3) =  0
0:( 4, 1, 3) =  0
0:( 5, 1, 3) =  0
0:( 6, 1, 3) =  0
0:(-2, 2, 3) =  0
0:  skipping to end ...
0:( 6,11,10) =  0
0:(-2,12,10) =  0
0:(-1,12,10) =  0
0:( 0,12,10) =  0
0:( 1,12,10) =  0
1:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
1: yCreateGetUTest.F90, line 768
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
2: s Test, ESMF_ArrayCreateGetUTest.F90, line 725
3:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
3: yCreateGetUTest.F90, line 768
0:( 2,12,10) =  0
0:( 3,12,10) =  0
0:( 4,12,10) =  0
0:( 5,12,10) =  0
0:( 6,12,10) =  0
0:dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
0:dim 2: [1]: [1 [1 [1, 12] 12] 12]
0:dim 3: undistLBound[0]=3            undistUBound[0]=10
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
0: line 623
2:--- ESMCI::Array::print start ---
2: Base name    = MyArray Negative
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
1:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
1: est, ESMF_ArrayCreateGetUTest.F90, line 778
2:{}Array typekind/rank: Real*8 / 2 
2:~ lower class' values ~
2:DistGrid dimCount = 2
2:deCount = 4
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x346c110:
3:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
3: est, ESMF_ArrayCreateGetUTest.F90, line 778
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
0:  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
2:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
2:            dim[0] = 8  dim[1] = 11  
2:  Real, *8, Dim 2, Data values:
2:( 1,13) =  2.33253e-310
2:( 2,13) =  302
2:( 3,13) =  302
2:( 4,13) =  302
2:( 5,13) =  302
2:( 6,13) =  302
2:( 7,13) =  302
2:( 8,13) =  302
0:  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
2:( 1,14) =  302
2:( 2,14) =  302
2:  skipping to end ...
2:( 7,22) =  302
2:( 8,22) =  302
2:( 1,23) =  302
2:( 2,23) =  302
2:( 3,23) =  302
2:( 4,23) =  302
2:( 5,23) =  302
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
2:( 6,23) =  302
2:( 7,23) =  302
2:( 8,23) =  302
2:dim 1: [0]: [1 [2 [1, 8] 6] 8]
2:dim 2: [1]: [13 [14 [13, 23] 20] 23]
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
2: reateGetUTest.F90, line 732
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
0:  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
0: .F90, line 653
3:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
3: widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
1:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
1: widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
3:--- ESMCI::Array::print start ---
3: Base name    = MyArray Negative Edge
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
1:--- ESMCI::Array::print start ---
1: Base name    = MyArray Negative Edge
1: Status: Base = Ready,  object = Ready
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 2 
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 1
1: Proxy        = no
1: Root Info (Attributes):
1:{}Array typekind/rank: Real*8 / 2 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x346c050:
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
2: t, ESMF_ArrayCreateGetUTest.F90, line 748
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x346c190:
3:            rank = 2, typekind = 6, base_addr = 0x2af024375d00
3:            dim[0] = 11  dim[1] = 17  
3:  Real, *8, Dim 2, Data values:
3:( 8,11) =  0
3:( 9,11) =  0
3:(10,11) =  0
3:(11,11) =  0
3:(12,11) =  0
3:(13,11) =  0
3:(14,11) =  0
3:(15,11) =  0
1:            rank = 2, typekind = 6, base_addr = 0x2af024375d00
1:            dim[0] = 11  dim[1] = 18  
1:  Real, *8, Dim 2, Data values:
1:( 8,-1) =  0
1:( 9,-1) =  0
1:(10,-1) =  0
1:(11,-1) =  0
1:(12,-1) =  0
1:(13,-1) =  0
2:--- ESMCI::Array::print start ---
2: Base name    = MyArray Negative Edge
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
2:{}Array typekind/rank: Real*8 / 2 
2:~ lower class' values ~
2:DistGrid dimCount = 2
3:(16,11) =  0
3:(17,11) =  0
3:  skipping to end ...
3:( 9,27) =  0
3:(10,27) =  0
3:(11,27) =  0
3:(12,27) =  0
3:(13,27) =  0
3:(14,27) =  0
3:(15,27) =  0
3:(16,27) =  0
3:(17,27) =  0
3:(18,27) =  0
3:dim 1: [0]: [8 [9 [9, 15] 13] 18]
3:dim 2: [1]: [11 [13 [13, 23] 24] 27]
3:--- ESMCI::Array::print end ---
0:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
0: SMF_ArrayCreateGetUTest.F90, line 671
1:(14,-1) =  0
1:(15,-1) =  0
1:(16,-1) =  0
1:(17,-1) =  0
1:  skipping to end ...
1:( 9,16) =  0
1:(10,16) =  0
1:(11,16) =  0
1:(12,16) =  0
1:(13,16) =  0
1:(14,16) =  0
1:(15,16) =  0
1:(16,16) =  0
1:(17,16) =  0
1:(18,16) =  0
1:dim 1: [0]: [8 [9 [9, 15] 13] 18]
1:dim 2: [1]: [-1 [2 [1, 12] 12] 16]
1:--- ESMCI::Array::print end ---
2:deCount = 4
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x346c110:
2:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
2:            dim[0] = 8  dim[1] = 12  
2:  Real, *8, Dim 2, Data values:
2:( 1,13) =  2.33253e-310
2:( 2,13) =  302
2:( 3,13) =  302
2:( 4,13) =  302
2:( 5,13) =  302
2:( 6,13) =  302
2:( 7,13) =  302
2:( 8,13) =  302
3:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
3: t, ESMF_ArrayCreateGetUTest.F90, line 804
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
1:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
1: t, ESMF_ArrayCreateGetUTest.F90, line 804
2:( 1,14) =  302
2:( 2,14) =  302
2:  skipping to end ...
2:( 7,23) =  302
2:( 8,23) =  302
2:( 1,24) =  0
2:( 2,24) =  0
2:( 3,24) =  0
2:( 4,24) =  0
2:( 5,24) =  0
2:( 6,24) =  0
2:( 7,24) =  0
2:( 8,24) =  0
2:dim 1: [0]: [1 [1 [1, 8] 8] 8]
2:dim 2: [1]: [13 [13 [13, 23] 24] 24]
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
2: rayCreateGetUTest.F90, line 755
3:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
3:  ESMF_ArrayCreateGetUTest.F90, line 816
1:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
1:  ESMF_ArrayCreateGetUTest.F90, line 816
0:  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
0: , ESMF_ArrayCreateGetUTest.F90, line 689
3:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
3: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
1:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
1: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
2:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
2: yCreateGetUTest.F90, line 768
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
1:  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
1: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 838
3:  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
3: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 846
2:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
2: est, ESMF_ArrayCreateGetUTest.F90, line 778
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
3:  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
3:  line 864
1:  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
1:  line 864
3:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
3: eateGetUTest.F90, line 871
1:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
1: eateGetUTest.F90, line 871
2:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
2: widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
3:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
3: UTest.F90, line 885
2:--- ESMCI::Array::print start ---
2: Base name    = MyArray Negative Edge
1:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
1: UTest.F90, line 885
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
2:{}Array typekind/rank: Real*8 / 2 
2:~ lower class' values ~
2:DistGrid dimCount = 2
2:deCount = 4
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x346c110:
2:            rank = 2, typekind = 6, base_addr = 0x2af024375d00
2:            dim[0] = 12  dim[1] = 17  
2:  Real, *8, Dim 2, Data values:
2:( 0,11) =  0
2:( 1,11) =  0
2:( 2,11) =  0
2:( 3,11) =  0
2:( 4,11) =  0
2:( 5,11) =  0
2:( 6,11) =  0
2:( 7,11) =  0
2:( 8,11) =  0
2:( 9,11) =  0
2:  skipping to end ...
2:( 2,27) =  0
2:( 3,27) =  0
2:( 4,27) =  0
2:( 5,27) =  0
2:( 6,27) =  0
2:( 7,27) =  0
2:( 8,27) =  0
2:( 9,27) =  0
2:(10,27) =  0
2:(11,27) =  0
2:dim 1: [0]: [0 [1 [1, 8] 8] 11]
2:dim 2: [1]: [11 [13 [13, 23] 24] 27]
2:--- ESMCI::Array::print end ---
0:  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
0: MF_ArrayCreateGetUTest.F90, line 708
2:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
2: t, ESMF_ArrayCreateGetUTest.F90, line 804
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
2:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
2:  ESMF_ArrayCreateGetUTest.F90, line 816
2:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
2: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
0: s Test, ESMF_ArrayCreateGetUTest.F90, line 725
2:  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
2: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 842
0:--- ESMCI::Array::print start ---
0: Base name    = MyArray Negative
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 2 
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 1
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x346d0d0:
0:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
0:            dim[0] = 8  dim[1] = 12  
0:  Real, *8, Dim 2, Data values:
0:( 1, 1) =  2.33253e-310
0:( 2, 1) =  300
0:( 3, 1) =  300
0:( 4, 1) =  300
0:( 5, 1) =  300
0:( 6, 1) =  300
0:( 7, 1) =  300
0:( 8, 1) =  300
0:( 1, 2) =  300
0:( 2, 2) =  300
0:  skipping to end ...
0:( 7,11) =  300
0:( 8,11) =  300
0:( 1,12) =  300
0:( 2,12) =  300
0:( 3,12) =  300
0:( 4,12) =  300
0:( 5,12) =  300
0:( 6,12) =  300
0:( 7,12) =  300
0:( 8,12) =  300
0:dim 1: [0]: [1 [2 [1, 8] 6] 8]
0:dim 2: [1]: [1 [2 [1, 12] 9] 12]
0:--- ESMCI::Array::print end ---
2:  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
2:  line 864
0:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
0: reateGetUTest.F90, line 732
2:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
2: eateGetUTest.F90, line 871
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
2:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
2: UTest.F90, line 885
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
0: t, ESMF_ArrayCreateGetUTest.F90, line 748
0:--- ESMCI::Array::print start ---
0: Base name    = MyArray Negative Edge
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 2 
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x346d0d0:
0:            rank = 2, typekind = 6, base_addr = 0x2af024367a00
0:            dim[0] = 8  dim[1] = 12  
0:  Real, *8, Dim 2, Data values:
0:( 1, 1) =  2.33253e-310
0:( 2, 1) =  300
0:( 3, 1) =  300
0:( 4, 1) =  300
0:( 5, 1) =  300
0:( 6, 1) =  300
0:( 7, 1) =  300
0:( 8, 1) =  300
0:( 1, 2) =  300
0:( 2, 2) =  300
0:  skipping to end ...
0:( 7,11) =  300
0:( 8,11) =  300
0:( 1,12) =  300
0:( 2,12) =  300
0:( 3,12) =  300
0:( 4,12) =  300
0:( 5,12) =  300
0:( 6,12) =  300
0:( 7,12) =  300
0:( 8,12) =  300
0:dim 1: [0]: [1 [1 [1, 8] 8] 8]
0:dim 2: [1]: [1 [2 [1, 12] 12] 12]
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
0: rayCreateGetUTest.F90, line 755
0:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
0: yCreateGetUTest.F90, line 768
0:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
0: est, ESMF_ArrayCreateGetUTest.F90, line 778
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
0:  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
0: widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
0:--- ESMCI::Array::print start ---
0: Base name    = MyArray Negative Edge
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 2 
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x346d0d0:
0:            rank = 2, typekind = 6, base_addr = 0x2af024375d00
0:            dim[0] = 12  dim[1] = 18  
0:  Real, *8, Dim 2, Data values:
0:( 0,-1) =  0
0:( 1,-1) =  0
0:( 2,-1) =  0
0:( 3,-1) =  0
0:( 4,-1) =  0
0:( 5,-1) =  0
0:( 6,-1) =  0
0:( 7,-1) =  0
0:( 8,-1) =  0
0:( 9,-1) =  0
0:  skipping to end ...
0:( 2,16) =  0
0:( 3,16) =  0
0:( 4,16) =  0
0:( 5,16) =  0
0:( 6,16) =  0
0:( 7,16) =  0
0:( 8,16) =  0
0:( 9,16) =  0
0:(10,16) =  0
0:(11,16) =  0
0:dim 1: [0]: [0 [1 [1, 8] 8] 11]
0:dim 2: [1]: [-1 [2 [1, 12] 12] 16]
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
0: t, ESMF_ArrayCreateGetUTest.F90, line 804
0:  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
0:  ESMF_ArrayCreateGetUTest.F90, line 816
0:  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
0: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
0:  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
0: l widths Test, ESMF_ArrayCreateGetUTest.F90, line 834
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
0:  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
0:  line 864
0:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
0: eateGetUTest.F90, line 871
0:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
0: UTest.F90, line 885
1:  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
1:  line 895
2:  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
2:  line 895
3:  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
3:  line 895
0:  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
0:  line 895
0:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
0: eateGetUTest.F90, line 907
1:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
1: eateGetUTest.F90, line 907
2:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
2: eateGetUTest.F90, line 907
3:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
3: eateGetUTest.F90, line 907
0:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
0: st.F90, line 925
1:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
1: st.F90, line 925
2:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
2: st.F90, line 925
3:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
3: st.F90, line 925
0:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 944
1:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 944
2:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 944
3:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 944
0:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
0: ine 966
1:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
1: ine 966
2:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
2: ine 966
3:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
3: ine 966
0:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
0: TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
1:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
1: TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
2:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
2: TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
3:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
3: TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
2:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
2:  ESMF_ArrayCreateGetUTest.F90, line 1009
0:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
0:  ESMF_ArrayCreateGetUTest.F90, line 1009
1:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
1:  ESMF_ArrayCreateGetUTest.F90, line 1009
3:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
3:  ESMF_ArrayCreateGetUTest.F90, line 1009
2:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
2: tUTest.F90, line 1023
3:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
3: tUTest.F90, line 1023
0:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
0: tUTest.F90, line 1023
1:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
1: tUTest.F90, line 1023
3:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
3: F_ArrayCreateGetUTest.F90, line 1035
0:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
0: F_ArrayCreateGetUTest.F90, line 1035
2:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
2: F_ArrayCreateGetUTest.F90, line 1035
1:  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
1: F_ArrayCreateGetUTest.F90, line 1035
3:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
3: ateGetUTest.F90, line 1053
2:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
2: ateGetUTest.F90, line 1053
0:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
0: ateGetUTest.F90, line 1053
1:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
1: ateGetUTest.F90, line 1053
3:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 1072
2:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 1072
0:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 1072
1:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 1072
0:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
0: st.F90, line 1094
1:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
1: st.F90, line 1094
2:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
2: st.F90, line 1094
3:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
3: st.F90, line 1094
0:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
0: TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
1:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
1: TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
2:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
2: TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
3:  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
3: TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
0:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
0: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
1:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
1: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
2:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
2: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
3:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
3: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
0:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
0: GetUTest.F90, line 1151
1:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
1: GetUTest.F90, line 1151
2:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
2: GetUTest.F90, line 1151
3:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
3: GetUTest.F90, line 1151
1:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
1: rrayCreateGetUTest.F90, line 1166
3:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
3: rrayCreateGetUTest.F90, line 1166
0:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
0: rrayCreateGetUTest.F90, line 1166
2:  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
2: rrayCreateGetUTest.F90, line 1166
1:--- ESMCI::Array::print start ---
0:--- ESMCI::Array::print start ---
1: Base name    = Array024
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
2:--- ESMCI::Array::print start ---
2: Base name    = Array024
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
3:--- ESMCI::Array::print start ---
3: Base name    = Array024
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 2 
0: Base name    = Array024
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 2 
0:~ lower class' values ~
0:DistGrid dimCount = 2
0:deCount = 4
0:localDeCount = 2
0:~ local data in LocalArray for DE 0 ~
1:{}Array typekind/rank: Real*8 / 2 
1:~ lower class' values ~
1:DistGrid dimCount = 2
1:deCount = 4
1:localDeCount = 0
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
1: rayCreateGetUTest.F90, line 1177
2:{}Array typekind/rank: Real*8 / 2 
2:~ lower class' values ~
2:DistGrid dimCount = 2
2:deCount = 4
2:localDeCount = 2
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x3477fd0:
2:            rank = 2, typekind = 6, base_addr = 0x2ae06c8725a0
2:            dim[0] = 8  dim[1] = 11  
2:  Real, *8, Dim 2, Data values:
2:( 1,13) =  20
2:( 2,13) =  20
2:( 3,13) =  20
2:( 4,13) =  20
3:~ lower class' values ~
3:DistGrid dimCount = 2
3:deCount = 4
3:localDeCount = 0
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
3: rayCreateGetUTest.F90, line 1177
0:LocalArrayPrint: Array at address 0x34765c0:
0:            rank = 2, typekind = 6, base_addr = 0x2ae06c872000
0:            dim[0] = 8  dim[1] = 12  
0:  Real, *8, Dim 2, Data values:
0:( 1, 1) =  0
0:( 2, 1) =  0
0:( 3, 1) =  0
0:( 4, 1) =  0
0:( 5, 1) =  0
0:( 6, 1) =  0
0:( 7, 1) =  0
0:( 8, 1) =  0
0:( 1, 2) =  0
0:( 2, 2) =  0
0:  skipping to end ...
0:( 7,11) =  0
0:( 8,11) =  0
0:( 1,12) =  0
2:( 5,13) =  20
2:( 6,13) =  20
2:( 7,13) =  20
2:( 8,13) =  20
2:( 1,14) =  20
2:( 2,14) =  20
2:  skipping to end ...
2:( 7,22) =  20
2:( 8,22) =  20
2:( 1,23) =  20
2:( 2,23) =  20
2:( 3,23) =  20
2:( 4,23) =  20
2:( 5,23) =  20
2:( 6,23) =  20
2:( 7,23) =  20
2:( 8,23) =  20
0:( 2,12) =  0
0:( 3,12) =  0
0:( 4,12) =  0
0:( 5,12) =  0
0:( 6,12) =  0
0:( 7,12) =  0
0:( 8,12) =  0
0:dim 1: [0]: [1 [1 [1, 8] 8] 8]
0:dim 2: [1]: [1 [1 [1, 12] 12] 12]
0:~ local data in LocalArray for DE 1 ~
0:LocalArrayPrint: Array at address 0x34768f0:
0:            rank = 2, typekind = 6, base_addr = 0x2ae06c872300
1:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
1: ateGetUTest.F90, line 1185
2:dim 1: [0]: [1 [1 [1, 8] 8] 8]
2:dim 2: [1]: [13 [13 [13, 23] 23] 23]
2:~ local data in LocalArray for DE 3 ~
2:LocalArrayPrint: Array at address 0x3478300:
2:            rank = 2, typekind = 6, base_addr = 0x2ae06c872860
2:            dim[0] = 7  dim[1] = 11  
2:  Real, *8, Dim 2, Data values:
2:( 9,13) =  30
2:(10,13) =  30
2:(11,13) =  30
2:(12,13) =  30
2:(13,13) =  30
2:(14,13) =  30
2:(15,13) =  30
2:( 9,14) =  30
0:            dim[0] = 7  dim[1] = 12  
0:  Real, *8, Dim 2, Data values:
0:( 9, 1) =  10
0:(10, 1) =  10
0:(11, 1) =  10
0:(12, 1) =  10
0:(13, 1) =  10
0:(14, 1) =  10
0:(15, 1) =  10
0:( 9, 2) =  10
0:(10, 2) =  10
0:(11, 2) =  10
0:  skipping to end ...
0:(13,11) =  10
0:(14,11) =  10
2:(10,14) =  30
2:(11,14) =  30
2:  skipping to end ...
2:(13,22) =  30
2:(14,22) =  30
2:(15,22) =  30
2:( 9,23) =  30
2:(10,23) =  30
2:(11,23) =  30
2:(12,23) =  30
2:(13,23) =  30
2:(14,23) =  30
2:(15,23) =  30
3:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
3: ateGetUTest.F90, line 1185
0:(15,11) =  10
0:( 9,12) =  10
0:(10,12) =  10
0:(11,12) =  10
0:(12,12) =  10
0:(13,12) =  10
0:(14,12) =  10
0:(15,12) =  10
0:dim 1: [0]: [9 [9 [9, 15] 15] 15]
0:dim 2: [1]: [1 [1 [1, 12] 12] 12]
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
0: rayCreateGetUTest.F90, line 1177
2:dim 1: [0]: [9 [9 [9, 15] 15] 15]
2:dim 2: [1]: [13 [13 [13, 23] 23] 23]
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
2: rayCreateGetUTest.F90, line 1177
1:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 1204
3:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 1204
2:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
2: ateGetUTest.F90, line 1185
0:  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
0: ateGetUTest.F90, line 1185
1:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
1: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
3:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
3: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
0:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 1204
2:  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 1204
2:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
2: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
0:  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
0: Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
0:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
0: st.F90, line 1250
1:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
1: st.F90, line 1250
2:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
2: st.F90, line 1250
3:  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
3: st.F90, line 1250
0:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
0: _ArrayCreateGetUTest.F90, line 1262
1:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
1: _ArrayCreateGetUTest.F90, line 1262
2:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
2: _ArrayCreateGetUTest.F90, line 1262
3:  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
3: _ArrayCreateGetUTest.F90, line 1262
0:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
0: UTest.F90, line 1274
1:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
1: UTest.F90, line 1274
3:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
3: UTest.F90, line 1274
2:  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
2: UTest.F90, line 1274
2:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 1296
3:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 1296
0:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 1296
1:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 1296
2:  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 1303
3:  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 1303
0:  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 1303
1:  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 1303
0:  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
0: , ESMF_ArrayCreateGetUTest.F90, line 1310
1:  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
1: , ESMF_ArrayCreateGetUTest.F90, line 1310
2:  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
2: , ESMF_ArrayCreateGetUTest.F90, line 1310
3:  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
3: , ESMF_ArrayCreateGetUTest.F90, line 1310
3:--- ESMCI::Array::print start ---
3: Base name    = Array028
0:--- ESMCI::Array::print start ---
0: Base name    = Array028
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
1:--- ESMCI::Array::print start ---
1: Base name    = Array028
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
2:--- ESMCI::Array::print start ---
2: Base name    = Array028
2: Status: Base = Ready,  object = Ready
2: Proxy        = no
2: Root Info (Attributes):
2:{}Array typekind/rank: Real*8 / 1 
2:~ lower class' values ~
2:DistGrid dimCount = 1
2:deCount = 4
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 1 
3:~ lower class' values ~
3:DistGrid dimCount = 1
3:deCount = 4
3:localDeCount = 1
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x3478dc0:
3:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 1 
0:~ lower class' values ~
0:DistGrid dimCount = 1
0:deCount = 4
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x3473800:
0:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
0:            dim[0] = 10  
0:  Real, *8, Dim 1, Data values:
0:( 1) =  0
1:{}Array typekind/rank: Real*8 / 1 
1:~ lower class' values ~
1:DistGrid dimCount = 1
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x34779e0:
1:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
1:            dim[0] = 10  
1:  Real, *8, Dim 1, Data values:
1:( 1) =  0
1:( 2) =  0
1:( 3) =  0
1:( 4) =  0
1:( 5) =  0
1:( 6) =  0
1:( 7) =  0
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x34755b0:
2:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
2:            dim[0] = 10  
2:  Real, *8, Dim 1, Data values:
2:( 1) =  0
2:( 2) =  0
2:( 3) =  0
2:( 4) =  0
2:( 5) =  0
2:( 6) =  0
2:( 7) =  0
2:( 8) =  0
2:( 9) =  0
2:(10) =  0
2:dim 1: [0]: [1 [1 [1, 10] 10] 10]
2:--- ESMCI::Array::print end ---
3:            dim[0] = 10  
3:  Real, *8, Dim 1, Data values:
3:( 1) =  0
3:( 2) =  0
3:( 3) =  0
3:( 4) =  0
3:( 5) =  0
3:( 6) =  0
3:( 7) =  0
3:( 8) =  0
3:( 9) =  0
3:(10) =  0
3:dim 1: [0]: [1 [1 [1, 10] 10] 10]
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
3: .F90, line 1317
0:( 2) =  0
0:( 3) =  0
0:( 4) =  0
0:( 5) =  0
0:( 6) =  0
0:( 7) =  0
0:( 8) =  0
0:( 9) =  0
0:(10) =  0
0:dim 1: [0]: [1 [1 [1, 10] 10] 10]
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
0: .F90, line 1317
1:( 8) =  0
1:( 9) =  0
1:(10) =  0
1:dim 1: [0]: [1 [1 [1, 10] 10] 10]
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
1: .F90, line 1317
2:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
2: .F90, line 1317
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
2:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
2:  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
0:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
0:  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
3:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
3:  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
1:  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
1:  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
2:--- ESMCI::Array::print start ---
2: Base name    = Array029
2: Status: Base = Ready,  object = Ready
0:--- ESMCI::Array::print start ---
0: Base name    = Array029
2: Proxy        = no
2: Root Info (Attributes):
2:{}Array typekind/rank: Real*8 / 1 
2:~ lower class' values ~
2:DistGrid dimCount = 1
2:deCount = 4
3:--- ESMCI::Array::print start ---
3: Base name    = Array029
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
3:{}Array typekind/rank: Real*8 / 1 
3:~ lower class' values ~
3:DistGrid dimCount = 1
3:deCount = 4
3:localDeCount = 1
3:~ local data in LocalArray for DE 3 ~
3:LocalArrayPrint: Array at address 0x3478dc0:
0: Status: Base = Ready,  object = Ready
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 1 
0:~ lower class' values ~
0:DistGrid dimCount = 1
0:deCount = 4
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x3474010:
1:--- ESMCI::Array::print start ---
1: Base name    = Array029
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
1:{}Array typekind/rank: Real*8 / 1 
1:~ lower class' values ~
1:DistGrid dimCount = 1
1:deCount = 4
1:localDeCount = 1
1:~ local data in LocalArray for DE 1 ~
1:LocalArrayPrint: Array at address 0x34779e0:
1:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
2:localDeCount = 1
2:~ local data in LocalArray for DE 2 ~
2:LocalArrayPrint: Array at address 0x34755b0:
2:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
2:            dim[0] = 10  
2:  Real, *8, Dim 1, Data values:
2:( 1) =  0
2:( 2) =  0
2:( 3) =  0
2:( 4) =  0
2:( 5) =  0
2:( 6) =  0
2:( 7) =  0
2:( 8) =  0
2:( 9) =  0
2:(10) =  0
2:dim 1: [0]: [1 [1 [1, 10] 10] 10]
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
2: widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
3:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
3:            dim[0] = 10  
3:  Real, *8, Dim 1, Data values:
3:( 1) =  0
3:( 2) =  0
3:( 3) =  0
3:( 4) =  0
3:( 5) =  0
3:( 6) =  0
3:( 7) =  0
3:( 8) =  0
3:( 9) =  0
3:(10) =  0
3:dim 1: [0]: [1 [1 [1, 10] 9] 10]
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
3: widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
0:            rank = 1, typekind = 6, base_addr = 0x7ffd2c80dcb0
0:            dim[0] = 10  
0:  Real, *8, Dim 1, Data values:
0:( 1) =  0
0:( 2) =  0
0:( 3) =  0
0:( 4) =  0
0:( 5) =  0
0:( 6) =  0
0:( 7) =  0
0:( 8) =  0
0:( 9) =  0
0:(10) =  0
0:dim 1: [0]: [1 [2 [1, 10] 10] 10]
0:--- ESMCI::Array::print end ---
0:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
1:            dim[0] = 10  
1:  Real, *8, Dim 1, Data values:
1:( 1) =  0
1:( 2) =  0
1:( 3) =  0
1:( 4) =  0
1:( 5) =  0
1:( 6) =  0
1:( 7) =  0
1:( 8) =  0
1:( 9) =  0
1:(10) =  0
1:dim 1: [0]: [1 [1 [1, 10] 10] 10]
1:--- ESMCI::Array::print end ---
1:  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
1: widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
0: widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
2:  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 1366
0:  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 1366
3:  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 1366
1:  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 1366
0:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 1373
2:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 1373
1:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 1373
3:  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 1373
0:  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
0: , ESMF_ArrayCreateGetUTest.F90, line 1380
2:  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
2: , ESMF_ArrayCreateGetUTest.F90, line 1380
1:  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
1: , ESMF_ArrayCreateGetUTest.F90, line 1380
3:  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
3: , ESMF_ArrayCreateGetUTest.F90, line 1380
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
0:  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 1406
2:  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 1406
1:  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 1406
3:  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 1406
0:  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 1413
2:  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 1413
1:  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 1413
3:  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 1413
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
0:  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
0: t.F90, line 1439
1:  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
1: t.F90, line 1439
2:  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
2: t.F90, line 1439
3:  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
3: t.F90, line 1439
1:  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
1: teGetUTest.F90, line 1446
2:  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
2: teGetUTest.F90, line 1446
3:  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
3: teGetUTest.F90, line 1446
0:  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
0: teGetUTest.F90, line 1446
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
3:  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
3: F90, line 1514
0:  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
0: F90, line 1514
2:  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
2: F90, line 1514
1:  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
1: F90, line 1514
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
1:  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
1: 562
2:  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
2: 562
3:  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
3: 562
0:  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
0: 562
1:--- ESMCI::Array::print start ---
1: Base name    = MyArray
2:--- ESMCI::Array::print start ---
2: Base name    = MyArray
2: Status: Base = Ready,  object = Ready
3:--- ESMCI::Array::print start ---
3: Base name    = MyArray
3: Status: Base = Ready,  object = Ready
3: Proxy        = no
3: Root Info (Attributes):
0:--- ESMCI::Array::print start ---
0: Base name    = MyArray
0: Status: Base = Ready,  object = Ready
1: Status: Base = Ready,  object = Ready
1: Proxy        = no
1: Root Info (Attributes):
1:{}Array typekind/rank: Real*8 / 1 
1:~ lower class' values ~
1:DistGrid dimCount = 1
1:deCount = 1
1:localDeCount = 0
1:--- ESMCI::Array::print end ---
2: Proxy        = no
2: Root Info (Attributes):
2:{}Array typekind/rank: Real*8 / 1 
2:~ lower class' values ~
2:DistGrid dimCount = 1
2:deCount = 1
2:localDeCount = 0
2:--- ESMCI::Array::print end ---
2:  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
2: ne 1569
3:{}Array typekind/rank: Real*8 / 1 
3:~ lower class' values ~
3:DistGrid dimCount = 1
3:deCount = 1
3:localDeCount = 0
3:--- ESMCI::Array::print end ---
3:  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
3: ne 1569
0: Proxy        = no
0: Root Info (Attributes):
0:{}Array typekind/rank: Real*8 / 1 
0:~ lower class' values ~
0:DistGrid dimCount = 1
0:deCount = 1
0:localDeCount = 1
0:~ local data in LocalArray for DE 0 ~
0:LocalArrayPrint: Array at address 0x347bd80:
0:            rank = 1, typekind = 6, base_addr = 0x2af024363fe0
0:            dim[0] = 4  
1:  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
1: ne 1569
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
0:  Real, *8, Dim 1, Data values:
0:( 1) =  2.3325e-310
0:( 2) =  -nan
0:( 3) =  2.75859e-313
0:( 4) =  2.75859e-313
0:dim 1: [0]: [1 [1 [1, 4] 4] 4]
0:--- ESMCI::Array::print end ---
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
0:  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
0: ne 1569
3:  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
3: eateGetUTest.F90, line 1592
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
1:  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
1: eateGetUTest.F90, line 1592
2:  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
2: eateGetUTest.F90, line 1592
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
0:  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
0: eateGetUTest.F90, line 1592
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
3:  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
3: cation, ESMF_ArrayCreateGetUTest.F90, line 1627
1:  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
1: cation, ESMF_ArrayCreateGetUTest.F90, line 1627
2:  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
2: cation, ESMF_ArrayCreateGetUTest.F90, line 1627
1:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
3:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
2:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
3:  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
1:  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
2:  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
0:  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
0: cation, ESMF_ArrayCreateGetUTest.F90, line 1627
0:  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
0:  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
3:  PET           3  Test Elapsed Time    16.8820000000000       msec.
2:  PET           2  Test Elapsed Time    16.8900000000000       msec.
1:  PET           1  Test Elapsed Time    17.4550000000000       msec.
0:  PET           0  Test Elapsed Time    16.8940000000000       msec.
