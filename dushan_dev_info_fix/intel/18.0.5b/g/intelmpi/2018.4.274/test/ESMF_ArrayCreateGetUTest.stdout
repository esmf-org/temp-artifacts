2022-07-22 05:29:36
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 125
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 125
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 125
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F
 90, line 125
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 157
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 157
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 157
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 171
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 171
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 171
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 178
 90, line 178
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 178
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90
 , line 157
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 186
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 186
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 171
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 186
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 193
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 193
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
 02
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 193
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
 02
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F
 90, line 178
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
 02
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
 7
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
 7
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
 7
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 225
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 225
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 225
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
 ne 232
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
 ne 232
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
 ne 232
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 186
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
 rrayCreateGetUTest.F90, line 241
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
 rrayCreateGetUTest.F90, line 241
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
 rrayCreateGetUTest.F90, line 241
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 193
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 2
 02
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 21
 7
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 249
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 249
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, lin
 e 225
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 249
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, li
 ne 232
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
 eateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
 eateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
 eateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 285
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 285
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 285
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_A
 rrayCreateGetUTest.F90, line 241
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
 Root Info (Attributes):

 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}{}Array typekind/rank: Real*8 / 2 
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26eeaf0:
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x1589af0:
            rank = 2, typekind = 6, base_addr = 0x2ab5a2a3fb00
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.
 F90, line 249
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1202ae0:
            rank = 2, typekind = 6, base_addr = 0x2b6cf6f23a00
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  0
            rank = 2, typekind = 6, base_addr = 0x2afa00b3fa00
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  0
( 2,13) =  0
( 3,13) =  0
( 4,13) =  0
( 5,13) =  0
( 6,13) =  0
( 7,13) =  0
( 8,13) =  0
( 1,14) =  0
( 2,14) =  0
( 9,13) =  0
(10,13) =  0
(11,13) =  0
(12,13) =  0
(13,13) =  0
(14,13) =  0
(15,13) =  0
( 9,14) =  0
(10,14) =  0
(11,14) =  0
  skipping to end ...
(13,22) =  0
(14,22) =  0
(15,22) =  0
( 9,23) =  0
(10,23) =  0
(11,23) =  0
(12,23) =  0
(10, 1) =  0
(11, 1) =  0
(12, 1) =  0
(13, 1) =  0
(14, 1) =  0
(15, 1) =  0
( 9, 2) =  0
(10, 2) =  0
(11, 2) =  0
  skipping to end ...
(13,11) =  0
(14,11) =  0
(15,11) =  0
( 9,12) =  0
(10,12) =  0
(11,12) =  0
(12,12) =  0
(13,12) =  0
(14,12) =  0
  skipping to end ...
( 7,22) =  0
( 8,22) =  0
( 1,23) =  0
( 2,23) =  0
( 3,23) =  0
( 4,23) =  0
( 5,23) =  0
( 6,23) =  0
( 7,23) =  0
( 8,23) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
 292
(13,23) =  0
(14,23) =  0
(15,23) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
 292
(15,12) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
 292
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
 Array name: 
 MyArray with ArraySpec                                                         
  
 Array name: 
 MyArray with ArraySpec                                                         
  
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 300
 Array name: 
 MyArray with ArraySpec                                                         
  
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 300
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 300
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
  306
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
  306
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
  306
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 319
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 319
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 319
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCr
 eateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 285
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1638b60:
            rank = 2, typekind = 6, base_addr = 0x2b2fee5a3a00
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  0
( 2, 1) =  0
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 
 292
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
 e 326
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
 e 326
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
 e 326
 Array name: 
 MyArray with ArraySpec                                                         
  
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 300
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
  332
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
  332
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
  332
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
 t.F90, line 339
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line
  306
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
 t.F90, line 339
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
 t.F90, line 339
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 319
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 347
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 347
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 347
 Array name: 
 Array007                                                                       
  
 Array name: 
 Array007                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 355
 Array name: 
 Array007                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 355
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 355
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 361
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 361
 est.F90, line 361
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
 CreateGetUTest.F90, line 368
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
 CreateGetUTest.F90, line 368
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
 CreateGetUTest.F90, line 368
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, lin
 e 326
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line
  332
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTes
 t.F90, line 339
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 347
 Array name: 
 Array007                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 355
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 361
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_Array
 CreateGetUTest.F90, line 368
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
 t.F90, line 384
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
 t.F90, line 384
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
 t.F90, line 384
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 402
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x158a820:
            rank = 2, typekind = 6, base_addr = 0x2ab5a2a3f880
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  103
(10,13) =  103
(11,13) =  103
(12,13) =  103
(13,13) =  103
(14,13) =  103
(15,13) =  103
( 9,14) =  103
(10,14) =  103
(11,14) =  103
  skipping to end ...
(13,22) =  103
(14,22) =  103
(15,22) =  103
( 9,23) =  103
(10,23) =  103
(11,23) =  103
(12,23) =  103
(13,23) =  103
(14,23) =  103
(15,23) =  103
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
  Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
 3
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 402
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 402
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 431
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 438
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1203810:
            rank = 2, typekind = 6, base_addr = 0x2b6cf6f23700
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  101
(10, 1) =  101
(11, 1) =  101
(12, 1) =  101
 Proxy        = no
 Root Info (Attributes):
(13, 1) =  101
(14, 1) =  101
(15, 1) =  101
( 9, 2) =  101
(10, 2) =  101
(11, 2) =  101
  skipping to end ...
(13,11) =  101
(14,11) =  101
(15,11) =  101
( 9,12) =  101
(10,12) =  101
(11,12) =  101
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26ef820:
            rank = 2, typekind = 6, base_addr = 0x2afa00b3f700
            dim[0] = 8    PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 446
(12,12) =  101
(13,12) =  101
(14,12) =  101
(15,12) =  101
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
  Test, ESMF_ArrayCreateGetUTest.F90, line 416
dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  102
( 2,13) =  102
( 3,13) =  102
( 4,13) =  102
( 5,13) =  102
( 6,13) =  102
( 7,13) =  102
( 8,13) =  102
( 1,14) =  102
( 2,14) =  102
  skipping to end ...
( 7,22) =  102
( 8,22) =  102
( 1,23) =  102
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
 3
( 2,23) =  102
( 3,23) =  102
( 4,23) =  102
( 5,23) =  102
( 6,23) =  102
( 7,23) =  102
( 8,23) =  102
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
  Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
 3
 Array name: 
 Array009                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 454
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 460
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 431
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
 CreateGetUTest.F90, line 467
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 438
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 431
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 446
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 438
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 446
 Array name: 
 Array009                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 454
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 460
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTes
 t.F90, line 384
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
 CreateGetUTest.F90, line 467
 Array name: 
 Array009                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 454
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 460
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
 CreateGetUTest.F90, line 467
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
 90, line 483
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
 90, line 483
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
 90, line 483
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 402
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1639890:
            rank = 2, typekind = 6, base_addr = 0x2b2fee5a3700
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  100
( 2, 1) =  100
( 3, 1) =  100
( 4, 1) =  100
( 5, 1) =  100
( 6, 1) =  100
( 7, 1) =  100
( 8, 1) =  100
( 1, 2) =  100
( 2, 2) =  100
  skipping to end ...
( 7,11) =  100
( 8,11) =  100
( 1,12) =  100
( 2,12) =  100
( 3,12) =  100
( 4,12) =  100
( 5,12) =  100
( 6,12) =  100
( 7,12) =  100
( 8,12) =  100
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8
  Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 42
 3
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 501
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
 5
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 431
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 438
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 523
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 530
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreat
 eGetUTest.F90, line 446
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 538
 Array name: 
 Array011                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
 F90, line 546
 Array name: 
 Array009                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTes
 t.F90, line 454
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
 t.F90, line 552
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
 eateGetUTest.F90, line 559
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUT
 est.F90, line 460
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 501
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_Array
 CreateGetUTest.F90, line 467
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
 5
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 523
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 501
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 530
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
 5
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 538
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 523
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 530
 Array name: 
 Array011                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
 F90, line 546
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
 t.F90, line 552
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 538
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
 eateGetUTest.F90, line 559
 Array name: 
 Array011                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
 F90, line 546
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
 t.F90, line 552
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
 eateGetUTest.F90, line 559
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
 teGetUTest.F90, line 575
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
 teGetUTest.F90, line 575
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F
 90, line 483
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
 teGetUTest.F90, line 575
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
 teGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
 teGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
 ayCreateGetUTest.F90, line 616
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
 teGetUTest.F90, line 593
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x158a820:
            rank = 3, typekind = 5, base_addr = 0x2ab5a2a37040
            dim[0] = 9  dim[1] = 12    PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  0
(-1, 1, 3) =  0
( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
 line 623
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_Arra
 yCreateGetUTest.F90, line 501
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 51
 5
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
 ayCreateGetUTest.F90, line 616
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base =   PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
 .F90, line 653
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_Array
 CreateGetUTest.F90, line 523
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1203810:
            rank = 3, typekind = 5, base_addr = 0x2b6cf6f1b040
              PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  0
(-1, 1, 3) =  0
( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 530
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
 line 623
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
 ayCreateGetUTest.F90, line 616
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26ef820:
            rank = 3, typekind = 5, base_addr = 0x2afa00b37040
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateG
 etUTest.F90, line 538
(-2, 1, 3) =  0
(-1, 1, 3) =  0
( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
 line 623
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
 Array name: 
 Array011                                                                       
  
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.
 F90, line 546
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTes
 t.F90, line 552
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
 SMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCr
 eateGetUTest.F90, line 559
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
 .F90, line 653
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
 .F90, line 653
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
 SMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
 SMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
 , ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
 , ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
 , ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCrea
 teGetUTest.F90, line 575
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
 MF_ArrayCreateGetUTest.F90, line 708
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
 s Test, ESMF_ArrayCreateGetUTest.F90, line 725
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26f2950:
            rank = 2, typekind = 6, base_addr = 0x2afa00b3fa00
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  2.33462e-310
( 2,13) =  302
( 3,13) =  302
( 4,13) =  302
( 5,13) =  302
( 6,13) =  302
( 7,13) =  302
( 8,13) =  302
( 1,14) =  302
( 2,14) =  302
  skipping to end ...
( 7,22) =  302
( 8,22) =  302
( 1,23) =  302
( 2,23) =  302
( 3,23) =  302
( 4,23) =  302
( 5,23) =  302
( 6,23) =  302
( 7,23) =  302
( 8,23) =  302
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
 reateGetUTest.F90, line 732
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 748
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26f2950:
            rank = 2, typekind = 6, base_addr = 0x2afa00b3fa00
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1,13) =  2.33462e-310
( 2,13) =  302
( 3,13) =  302
( 4,13) =  302
( 5,13) =  302
( 6,13) =  302
( 7,13) =  302
( 8,13) =  302
( 1,14) =  302
( 2,14) =  302
  skipping to end ...
( 7,23) =  302
( 8,23) =  302
( 1,24) =  0
( 2,24) =  0
( 3,24) =  0
( 4,24) =  0
( 5,24) =  0
( 6,24) =  0
( 7,24) =  0
( 8,24) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
 rayCreateGetUTest.F90, line 755
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
 yCreateGetUTest.F90, line 768
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
 est, ESMF_ArrayCreateGetUTest.F90, line 778
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
 MF_ArrayCreateGetUTest.F90, line 708
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
 s Test, ESMF_ArrayCreateGetUTest.F90, line 725
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x158d950:
            rank = 2, typekind = 6, base_addr = 0x2ab5a2a3fb00
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  2.32011e-310
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
(10,13) =  303
(11,13) =  303
(12,13) =  303
(13,13) =  303
(14,13) =  303
(15,13) =  303
( 9,14) =  303
(10,14) =  303
(11,14) =  303
  skipping to end ...
(13,22) =  303
(14,22) =  303
(15,22) =  303
( 9,23) =  303
(10,23) =  303
(11,23) =  303
(12,23) =  303
(13,23) =  303
(14,23) =  303
(15,23) =  303
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
 reateGetUTest.F90, line 732
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,   PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
 object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
 MF_ArrayCreateGetUTest.F90, line 708
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26f2950:
            rank = 2, typekind = 6, base_addr = 0x2afa00b4dd00
            dim[0] = 12  dim[1] = 17  
  Real, *8, Dim 2, Data values:
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
( 0,11) =  0
( 1,11) =  0
( 2,11) =  0
( 3,11) =  0
( 4,11) =  0
( 5,11) =  0
( 6,11) =  0
( 7,11) =  0
( 8,11) =  0
( 9,11) =  0
  skipping to end ...
( 2,27) =  0
( 3,27) =  0
( 4,27) =  0
( 5,27) =  0
( 6,27) =  0
( 7,27) =  0
( 8,27) =  0
( 9,27) =  0
(10,27) =  0
(11,27) =  0
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 804
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
 s Test, ESMF_ArrayCreateGetUTest.F90, line 725
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 748
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1206940:
            rank = 2, typekind = 6, base_addr = 0x2b6cf6f23a00
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  2.35902e-310
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
  ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
(10, 1) =  301
(11, 1) =  301
(12, 1) =  301
(13, 1) =  301
(14, 1) =  301
(15, 1) =  301
( 9, 2) =  301
(10, 2) =  301
(11, 2) =  301
  skipping to end ...
(13,11) =  301
(14,11) =  301
(15,11) =  301
( 9,12) =  301
(10,12) =  301
(11,12) =  301
(12,12) =  301
(13,12) =  301
(14,12) =  301
(15,12) =  301
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 842
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x158d950:
            rank = 2, typekind = 6, base_addr = 0x2ab5a2a2fd00
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9,13) =  0
(10,13) =  0
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
 reateGetUTest.F90, line 732
(11,13) =  0
(12,13) =  0
(13,13) =  0
(14,13) =  0
(15,13) =  0
( 9,14) =  0
(10,14) =  0
(11,14) =  0
  skipping to end ...
(13,23) =  0
(14,23) =  0
(15,23) =  0
( 9,24) =  0
(10,24) =  0
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
(11,24) =  0
(12,24) =  0
(13,24) =  0
(14,24) =  0
(15,24) =  0
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
 rayCreateGetUTest.F90, line 755
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 748
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
  line 864
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,   PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
 eateGetUTest.F90, line 871
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
 yCreateGetUTest.F90, line 768
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
 est, ESMF_ArrayCreateGetUTest.F90, line 778
 object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1206940:
            rank = 2, typekind = 6,   PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
base_addr = 0x2b6cf6f23a00
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  2.35902e-310
(10, 1) =  301
(11, 1) =  301
(12, 1) =  301
(13, 1) =  301
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
 UTest.F90, line 885
(14, 1) =  301
(15, 1) =  301
( 9, 2) =  301
(10, 2) =  301
(11, 2) =  301
  skipping to end ...
(13,11) =  301
(14,11) =  301
(15,11) =  301
( 9,12) =  301
(10,12) =  301
(11,12) =  301
(12,12) =  301
(13,12) =  301
(14,12) =  301
(15,12) =  301
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
 rayCreateGetUTest.F90, line 755
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
 yCreateGetUTest.F90, line 768
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
 est, ESMF_ArrayCreateGetUTest.F90, line 778
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCrea
 teGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x158d950:
            rank = 2, typekind = 6, base_addr = 0x2ab5a2a4dd00
            dim[0] = 11  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 8,11) =  0
( 9,11) =  0
(10,11) =  0
(11,11) =  0
(12,11) =  0
(13,11) =  0
(14,11) =  0
(15,11) =  0
(16,11) =  0
(17,11) =  0
  skipping to end ...
( 9,27) =  0
(10,27) =  0
(11,27) =  0
(12,27) =  0
(13,27) =  0
(14,27) =  0
(15,27) =  0
(16,27) =  0
(17,27) =  0
(18,27) =  0
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 804
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
  ESMF_ArrayCreateGetUTest.F90, line 816
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 846
LocalArrayPrint: Array at address 0x1206940:
            rank = 2, typekind = 6, base_addr = 0x2b6cf6f31d00
            dim[0] = 11  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 8,-1) =  0
( 9,-1) =  0
(10,-1) =  0
(11,-1) =  0
(12,-1) =  0
(13,-1) =  0
(14,-1) =  0
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
(15,-1) =  0
(16,-1) =  0
(17,-1) =  0
  skipping to end ...
( 9,16) =  0
(10,16) =  0
(11,16) =  0
(12,16) =  0
(13,16) =  0
(14,16) =  0
(15,16) =  0
(16,16) =  0
(17,16) =  0
(18,16) =  0
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 804
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
  line 864
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
 eateGetUTest.F90, line 871
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
  ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
 UTest.F90, line 885
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 838
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
  line 864
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
 eateGetUTest.F90, line 871
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
 UTest.F90, line 885
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_Arr
 ayCreateGetUTest.F90, line 616
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1639890:
            rank = 3, typekind = 5, base_addr = 0x2b2fee59b040
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  0
(-1, 1, 3) =  0
( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, 
 line 623
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest
 .F90, line 653
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, E
 SMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test
 , ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ES
 MF_ArrayCreateGetUTest.F90, line 708
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational width
 s Test, ESMF_ArrayCreateGetUTest.F90, line 725
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x163c1b0:
            rank = 2, typekind = 6, base_addr = 0x2b2fee5a3a00
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  2.34606e-310
( 2, 1) =  300
( 3, 1) =  300
( 4, 1) =  300
( 5, 1) =  300
( 6, 1) =  300
( 7, 1) =  300
( 8, 1) =  300
( 1, 2) =  300
( 2, 2) =  300
  skipping to end ...
( 7,11) =  300
( 8,11) =  300
( 1,12) =  300
( 2,12) =  300
( 3,12) =  300
( 4,12) =  300
( 5,12) =  300
( 6,12) =  300
( 7,12) =  300
( 8,12) =  300
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayC
 reateGetUTest.F90, line 732
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 748
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x163c1b0:
            rank = 2, typekind = 6, base_addr = 0x2b2fee5a3a00
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  2.34606e-310
( 2, 1) =  300
( 3, 1) =  300
( 4, 1) =  300
( 5, 1) =  300
( 6, 1) =  300
( 7, 1) =  300
( 8, 1) =  300
( 1, 2) =  300
( 2, 2) =  300
  skipping to end ...
( 7,11) =  300
( 8,11) =  300
( 1,12) =  300
( 2,12) =  300
( 3,12) =  300
( 4,12) =  300
( 5,12) =  300
( 6,12) =  300
( 7,12) =  300
( 8,12) =  300
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Ar
 rayCreateGetUTest.F90, line 755
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_Arra
 yCreateGetUTest.F90, line 768
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths T
 est, ESMF_ArrayCreateGetUTest.F90, line 778
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x163c1b0:
            rank = 2, typekind = 6, base_addr = 0x2b2fee5b1d00
            dim[0] = 12  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 0,-1) =  0
( 1,-1) =  0
( 2,-1) =  0
( 3,-1) =  0
( 4,-1) =  0
( 5,-1) =  0
( 6,-1) =  0
( 7,-1) =  0
( 8,-1) =  0
( 9,-1) =  0
  skipping to end ...
( 2,16) =  0
( 3,16) =  0
( 4,16) =  0
( 5,16) =  0
( 6,16) =  0
( 7,16) =  0
( 8,16) =  0
( 9,16) =  0
(10,16) =  0
(11,16) =  0
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Tes
 t, ESMF_ArrayCreateGetUTest.F90, line 804
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test,
  ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and tota
 l widths Test, ESMF_ArrayCreateGetUTest.F90, line 834
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90,
  line 864
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCr
 eateGetUTest.F90, line 871
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGet
 UTest.F90, line 885
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
  line 895
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
  line 895
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
  line 895
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90,
  line 895
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
 eateGetUTest.F90, line 907
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
 eateGetUTest.F90, line 907
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
 eateGetUTest.F90, line 907
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCr
 eateGetUTest.F90, line 907
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
 st.F90, line 925
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
 st.F90, line 925
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
 st.F90, line 925
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTe
 st.F90, line 925
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
 t.F90, line 944
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
 t.F90, line 944
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
 t.F90, line 944
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTes
 t.F90, line 944
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
 ine 966
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
 ine 966
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
 ine 966
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, l
 ine 966
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
  ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
  ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
  ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test,
  ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
 tUTest.F90, line 1023
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
 tUTest.F90, line 1023
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
 tUTest.F90, line 1023
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGe
 tUTest.F90, line 1023
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
 F_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
 F_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
 F_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESM
 F_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1053
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1053
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1053
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1053
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1072
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1072
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1072
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1072
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1094
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1094
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1094
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1094
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_
 TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
 TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
 GetUTest.F90, line 1151
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
 GetUTest.F90, line 1151
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
 GetUTest.F90, line 1151
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreate
 GetUTest.F90, line 1151
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
 rrayCreateGetUTest.F90, line 1166
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
 rrayCreateGetUTest.F90, line 1166
--- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = --- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):

{}Array typekind/rank: Real*8 / 2 
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
 rayCreateGetUTest.F90, line 1177
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
 rrayCreateGetUTest.F90, line 1166
--- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = Ready,  object = Ready~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
 rayCreateGetUTest.F90, line 1177

 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 2
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26fbe00:
            rank = 2, typekind = 6, base_addr = 0x2af9f0c4d000
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  20
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_A
 rrayCreateGetUTest.F90, line 1166
( 2,13) =  20
( 3,13) =  20
( 4,13) =  20
( 5,13) =  20
( 6,13) =  20
( 7,13) =  20
( 8,13) =  20
( 1,14) =  20
( 2,14) =  20
  skipping to end ...
( 7,22) =  20
( 8,22) =  20
( 1,23) =  20
( 2,23) =  20
( 3,23) =  20
( 4,23) =  20
( 5,23) =  20
( 6,23) =  20
( 7,23) =  20
( 8,23) =  20
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x26fc130:
            rank = 2, typekind = 6, --- ESMCI::Array::print start ---
 Base name    = base_addr = 0x2af9f0c4e000
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  30
(10,13) =  30
(11,13) =  30
(12,13) =  30
(13,13) =  30
(14,13) =  30
(15,13) =  30
Array024
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1185
( 9,14) =  30
(10,14) =  30
(11,14) =  30
  skipping to end ...
(13,22) =  30
(14,22) =  30
(15,22) =  30
( 9,23) =  30
(10,23) =  30
(11,23) =  30
(12,23) =  30
(13,23) =  30
(14,23) =  30
(15,23) =  30
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
{}Array typekind/rank: Real*8 / 2 
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
 rayCreateGetUTest.F90, line 1177
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1185
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 2
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x16445c0:
            rank = 2, typekind = 6, base_addr = 0x2b2fde691000
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  0
( 2, 1) =  0
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1204
dim 2: [1]: [1 [1 [1, 12] 12] 12]
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x16448f0:
            rank = 2, typekind = 6, base_addr = 0x2b2fde692000
            dim[0] = 7  dim[1] = 12    PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1204

  Real, *8, Dim 2, Data values:
( 9, 1) =  10
(10, 1) =  10
(11, 1) =  10
(12, 1) =  10
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1185
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
(13, 1) =  10
(14, 1) =  10
(15, 1) =  10
( 9, 2) =  10
(10, 2) =  10
(11, 2) =  10
  skipping to end ...
(13,11) =  10
(14,11) =  10
(15,11) =  10
( 9,12) =  10
(10,12) =  10
(11,12) =  10
(12,12) =  10
(13,12) =  10
(14,12) =  10
(15,12) =  10
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_Ar
 rayCreateGetUTest.F90, line 1177
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1204
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCre
 ateGetUTest.F90, line 1185
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1204
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI array
 Cpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1250
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1250
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1250
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTe
 st.F90, line 1250
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
 _ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
 _ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
 _ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF
 _ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
 UTest.F90, line 1274
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
 UTest.F90, line 1274
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
 UTest.F90, line 1274
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGet
 UTest.F90, line 1274
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1296
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1296
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1296
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1303
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1303
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1303
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1296
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1310
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1310
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1310
--- ESMCI::Array::print start ---
 Base name    = --- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = noArray028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1303

 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1210960:
            rank = 1, typekind = 6, {}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26fc990:
            rank = 1, typekind = 6, base_addr = 0x7ffdf0f2ede0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
--- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}base_addr = 0x7ffde6d95760
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
 .F90, line 1317
Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x1598b40:
            rank = 1, typekind = 6, base_addr = 0x7ffe4a890e60
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
( 4) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
 .F90, line 1317
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
 .F90, line 1317
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1310
--- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1645110:
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
            rank = 1, typekind = 6, base_addr = 0x7fff7ec7b360
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1210960:
            rank = 1, typekind = 6, base_addr = 0x7ffde6d95760
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x26fd180:
            rank = 1, typekind = 6, base_addr = 0x7ffdf0f2ede0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  -9.25596e+61
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        = no( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340

 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x1599330:
            rank = 1, typekind = 6, base_addr = 0x7ffe4a890e60
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
 .F90, line 1317
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [1 [1, 10] 9] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1366
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1366
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1373
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge
  widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1366
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1373
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1373
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        =   PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
no
 Root Info (Attributes):
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1380
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1645900:
            rank = 1, typekind = 6, base_addr = 0x7fff7ec7b360
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  -9.25596e+61
( 2) =  -9.25596e+61
( 3) =  -9.25596e+61
( 4) =  -9.25596e+61
( 5) =  -9.25596e+61
( 6) =  -9.25596e+61
( 7) =  -9.25596e+61
( 8) =  -9.25596e+61
( 9) =  -9.25596e+61
(10) =  -9.25596e+61
dim 1: [0]: [1 [2 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge 
 widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1406
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1413
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1406
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1406
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1413
 teGetUTest.F90, line 1413
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1439
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1439
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1446
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1439
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1366
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1446
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1446
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1373
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test
 , ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1406
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1413
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
 F90, line 1514
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
 F90, line 1514
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
 F90, line 1514
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTes
 t.F90, line 1439
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCrea
 teGetUTest.F90, line 1446
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
 562
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
 562
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = --- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
 562
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
 ne 1569
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
 ne 1569
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
 ne 1569
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
 eateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
 eateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
 eateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
 cation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
 cation, ESMF_ArrayCreateGetUTest.F90, line 1627
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
 cation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.
 F90, line 1514
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1
 562
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x164ae80:
            rank = 1, typekind = 6, base_addr = 0x2b2fee59ffe0
            dim[0] = 4  
  Real, *8, Dim 1, Data values:
( 1) =  2.34587e-310
( 2) =  -nan
( 3) =  2.75859e-313
( 4) =  2.75859e-313
dim 1: [0]: [1 [1 [1, 4] 4] 4]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, li
 ne 1569
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCr
 eateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allo
 cation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PET           1  Test Elapsed Time    29.6290000000000       msec.
  PET           3  Test Elapsed Time    29.6840000000000       msec.
  PET           0  Test Elapsed Time    29.7440000000000       msec.
  PET           2  Test Elapsed Time    29.9330000000000       msec.
